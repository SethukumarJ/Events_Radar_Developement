// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/eventRepositoryInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/SethukumarJ/Events_Radar_Developement/pkg/domain"
	utils "github.com/SethukumarJ/Events_Radar_Developement/pkg/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// AcceptApplication mocks base method.
func (m *MockEventRepository) AcceptApplication(applicationStatusId, event_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptApplication", applicationStatusId, event_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptApplication indicates an expected call of AcceptApplication.
func (mr *MockEventRepositoryMockRecorder) AcceptApplication(applicationStatusId, event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptApplication", reflect.TypeOf((*MockEventRepository)(nil).AcceptApplication), applicationStatusId, event_id)
}

// AllApprovedEvents mocks base method.
func (m *MockEventRepository) AllApprovedEvents(pagenation utils.Filter, filter utils.FilterEvent) ([]domain.EventResponse, utils.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllApprovedEvents", pagenation, filter)
	ret0, _ := ret[0].([]domain.EventResponse)
	ret1, _ := ret[1].(utils.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllApprovedEvents indicates an expected call of AllApprovedEvents.
func (mr *MockEventRepositoryMockRecorder) AllApprovedEvents(pagenation, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllApprovedEvents", reflect.TypeOf((*MockEventRepository)(nil).AllApprovedEvents), pagenation, filter)
}

// CreateEvent mocks base method.
func (m *MockEventRepository) CreateEvent(event domain.Events) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", event)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventRepositoryMockRecorder) CreateEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventRepository)(nil).CreateEvent), event)
}

// CreatePoster mocks base method.
func (m *MockEventRepository) CreatePoster(event domain.Posters) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePoster", event)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePoster indicates an expected call of CreatePoster.
func (mr *MockEventRepositoryMockRecorder) CreatePoster(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoster", reflect.TypeOf((*MockEventRepository)(nil).CreatePoster), event)
}

// DeleteEvent mocks base method.
func (m *MockEventRepository) DeleteEvent(event_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", event_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventRepositoryMockRecorder) DeleteEvent(event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventRepository)(nil).DeleteEvent), event_id)
}

// DeletePoster mocks base method.
func (m *MockEventRepository) DeletePoster(poster_id, eventid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePoster", poster_id, eventid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePoster indicates an expected call of DeletePoster.
func (mr *MockEventRepositoryMockRecorder) DeletePoster(poster_id, eventid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoster", reflect.TypeOf((*MockEventRepository)(nil).DeletePoster), poster_id, eventid)
}

// FindEventById mocks base method.
func (m *MockEventRepository) FindEventById(event_id int) (domain.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventById", event_id)
	ret0, _ := ret[0].(domain.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventById indicates an expected call of FindEventById.
func (mr *MockEventRepositoryMockRecorder) FindEventById(event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventById", reflect.TypeOf((*MockEventRepository)(nil).FindEventById), event_id)
}

// FindEventByTitle mocks base method.
func (m *MockEventRepository) FindEventByTitle(title string) (domain.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventByTitle", title)
	ret0, _ := ret[0].(domain.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventByTitle indicates an expected call of FindEventByTitle.
func (mr *MockEventRepositoryMockRecorder) FindEventByTitle(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventByTitle", reflect.TypeOf((*MockEventRepository)(nil).FindEventByTitle), title)
}

// FindOrganizationById mocks base method.
func (m *MockEventRepository) FindOrganizationById(organizaiton_id int) (domain.OrganizationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrganizationById", organizaiton_id)
	ret0, _ := ret[0].(domain.OrganizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrganizationById indicates an expected call of FindOrganizationById.
func (mr *MockEventRepositoryMockRecorder) FindOrganizationById(organizaiton_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrganizationById", reflect.TypeOf((*MockEventRepository)(nil).FindOrganizationById), organizaiton_id)
}

// FindPosterById mocks base method.
func (m *MockEventRepository) FindPosterById(poster_id, eventid int) (domain.PosterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPosterById", poster_id, eventid)
	ret0, _ := ret[0].(domain.PosterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPosterById indicates an expected call of FindPosterById.
func (mr *MockEventRepositoryMockRecorder) FindPosterById(poster_id, eventid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPosterById", reflect.TypeOf((*MockEventRepository)(nil).FindPosterById), poster_id, eventid)
}

// FindPosterByName mocks base method.
func (m *MockEventRepository) FindPosterByName(title string, eventid int) (domain.PosterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPosterByName", title, eventid)
	ret0, _ := ret[0].(domain.PosterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPosterByName indicates an expected call of FindPosterByName.
func (mr *MockEventRepositoryMockRecorder) FindPosterByName(title, eventid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPosterByName", reflect.TypeOf((*MockEventRepository)(nil).FindPosterByName), title, eventid)
}

// FindUser mocks base method.
func (m *MockEventRepository) FindUser(username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockEventRepositoryMockRecorder) FindUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockEventRepository)(nil).FindUser), username)
}

// ListApplications mocks base method.
func (m *MockEventRepository) ListApplications(pagenation utils.Filter, applicationStatus string, event_id int) ([]domain.ApplicationFormResponse, utils.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", pagenation, applicationStatus, event_id)
	ret0, _ := ret[0].([]domain.ApplicationFormResponse)
	ret1, _ := ret[1].(utils.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApplications indicates an expected call of ListApplications.
func (mr *MockEventRepositoryMockRecorder) ListApplications(pagenation, applicationStatus, event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockEventRepository)(nil).ListApplications), pagenation, applicationStatus, event_id)
}

// PostersByEvent mocks base method.
func (m *MockEventRepository) PostersByEvent(eventid int) ([]domain.PosterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostersByEvent", eventid)
	ret0, _ := ret[0].([]domain.PosterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostersByEvent indicates an expected call of PostersByEvent.
func (mr *MockEventRepositoryMockRecorder) PostersByEvent(eventid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostersByEvent", reflect.TypeOf((*MockEventRepository)(nil).PostersByEvent), eventid)
}

// RejectApplication mocks base method.
func (m *MockEventRepository) RejectApplication(applicationStatusId, event_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectApplication", applicationStatusId, event_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectApplication indicates an expected call of RejectApplication.
func (mr *MockEventRepositoryMockRecorder) RejectApplication(applicationStatusId, event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectApplication", reflect.TypeOf((*MockEventRepository)(nil).RejectApplication), applicationStatusId, event_id)
}

// SearchEventUser mocks base method.
func (m *MockEventRepository) SearchEventUser(search string) ([]domain.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEventUser", search)
	ret0, _ := ret[0].([]domain.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEventUser indicates an expected call of SearchEventUser.
func (mr *MockEventRepositoryMockRecorder) SearchEventUser(search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEventUser", reflect.TypeOf((*MockEventRepository)(nil).SearchEventUser), search)
}

// UpdateEvent mocks base method.
func (m *MockEventRepository) UpdateEvent(event domain.Events, event_id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", event, event_id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventRepositoryMockRecorder) UpdateEvent(event, event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventRepository)(nil).UpdateEvent), event, event_id)
}
