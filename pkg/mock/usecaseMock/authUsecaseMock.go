// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/eventUsecaseInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/SethukumarJ/Events_Radar_Developement/pkg/domain"
	utils "github.com/SethukumarJ/Events_Radar_Developement/pkg/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockEventUsecase is a mock of EventUsecase interface.
type MockEventUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockEventUsecaseMockRecorder
}

// MockEventUsecaseMockRecorder is the mock recorder for MockEventUsecase.
type MockEventUsecaseMockRecorder struct {
	mock *MockEventUsecase
}

// NewMockEventUsecase creates a new mock instance.
func NewMockEventUsecase(ctrl *gomock.Controller) *MockEventUsecase {
	mock := &MockEventUsecase{ctrl: ctrl}
	mock.recorder = &MockEventUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventUsecase) EXPECT() *MockEventUsecaseMockRecorder {
	return m.recorder
}

// AcceptApplication mocks base method.
func (m *MockEventUsecase) AcceptApplication(applicationStatusId, event_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptApplication", applicationStatusId, event_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptApplication indicates an expected call of AcceptApplication.
func (mr *MockEventUsecaseMockRecorder) AcceptApplication(applicationStatusId, event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptApplication", reflect.TypeOf((*MockEventUsecase)(nil).AcceptApplication), applicationStatusId, event_id)
}

// AllApprovedEvents mocks base method.
func (m *MockEventUsecase) AllApprovedEvents(pagenation utils.Filter, filter utils.FilterEvent) (*[]domain.EventResponse, *utils.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllApprovedEvents", pagenation, filter)
	ret0, _ := ret[0].(*[]domain.EventResponse)
	ret1, _ := ret[1].(*utils.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllApprovedEvents indicates an expected call of AllApprovedEvents.
func (mr *MockEventUsecaseMockRecorder) AllApprovedEvents(pagenation, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllApprovedEvents", reflect.TypeOf((*MockEventUsecase)(nil).AllApprovedEvents), pagenation, filter)
}

// CreateEvent mocks base method.
func (m *MockEventUsecase) CreateEvent(event domain.Events) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventUsecaseMockRecorder) CreateEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventUsecase)(nil).CreateEvent), event)
}

// CreatePoster mocks base method.
func (m *MockEventUsecase) CreatePoster(event domain.Posters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePoster", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePoster indicates an expected call of CreatePoster.
func (mr *MockEventUsecaseMockRecorder) CreatePoster(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoster", reflect.TypeOf((*MockEventUsecase)(nil).CreatePoster), event)
}

// DeleteEvent mocks base method.
func (m *MockEventUsecase) DeleteEvent(event_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", event_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventUsecaseMockRecorder) DeleteEvent(event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventUsecase)(nil).DeleteEvent), event_id)
}

// DeletePoster mocks base method.
func (m *MockEventUsecase) DeletePoster(poster_id, event_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePoster", poster_id, event_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePoster indicates an expected call of DeletePoster.
func (mr *MockEventUsecaseMockRecorder) DeletePoster(poster_id, event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoster", reflect.TypeOf((*MockEventUsecase)(nil).DeletePoster), poster_id, event_id)
}

// FindEventById mocks base method.
func (m *MockEventUsecase) FindEventById(event_id int) (*domain.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventById", event_id)
	ret0, _ := ret[0].(*domain.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventById indicates an expected call of FindEventById.
func (mr *MockEventUsecaseMockRecorder) FindEventById(event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventById", reflect.TypeOf((*MockEventUsecase)(nil).FindEventById), event_id)
}

// FindEventByTitle mocks base method.
func (m *MockEventUsecase) FindEventByTitle(title string) (*domain.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventByTitle", title)
	ret0, _ := ret[0].(*domain.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventByTitle indicates an expected call of FindEventByTitle.
func (mr *MockEventUsecaseMockRecorder) FindEventByTitle(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventByTitle", reflect.TypeOf((*MockEventUsecase)(nil).FindEventByTitle), title)
}

// FindOrganizationById mocks base method.
func (m *MockEventUsecase) FindOrganizationById(organization_id int) (*domain.OrganizationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrganizationById", organization_id)
	ret0, _ := ret[0].(*domain.OrganizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrganizationById indicates an expected call of FindOrganizationById.
func (mr *MockEventUsecaseMockRecorder) FindOrganizationById(organization_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrganizationById", reflect.TypeOf((*MockEventUsecase)(nil).FindOrganizationById), organization_id)
}

// FindPosterById mocks base method.
func (m *MockEventUsecase) FindPosterById(poster_id, event_id int) (*domain.PosterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPosterById", poster_id, event_id)
	ret0, _ := ret[0].(*domain.PosterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPosterById indicates an expected call of FindPosterById.
func (mr *MockEventUsecaseMockRecorder) FindPosterById(poster_id, event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPosterById", reflect.TypeOf((*MockEventUsecase)(nil).FindPosterById), poster_id, event_id)
}

// FindPosterByName mocks base method.
func (m *MockEventUsecase) FindPosterByName(name string, event_id int) (*domain.PosterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPosterByName", name, event_id)
	ret0, _ := ret[0].(*domain.PosterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPosterByName indicates an expected call of FindPosterByName.
func (mr *MockEventUsecaseMockRecorder) FindPosterByName(name, event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPosterByName", reflect.TypeOf((*MockEventUsecase)(nil).FindPosterByName), name, event_id)
}

// FindUser mocks base method.
func (m *MockEventUsecase) FindUser(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockEventUsecaseMockRecorder) FindUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockEventUsecase)(nil).FindUser), username)
}

// ListApplications mocks base method.
func (m *MockEventUsecase) ListApplications(pagenation utils.Filter, applicationStatus string, event_id int) (*[]domain.ApplicationFormResponse, *utils.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", pagenation, applicationStatus, event_id)
	ret0, _ := ret[0].(*[]domain.ApplicationFormResponse)
	ret1, _ := ret[1].(*utils.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApplications indicates an expected call of ListApplications.
func (mr *MockEventUsecaseMockRecorder) ListApplications(pagenation, applicationStatus, event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockEventUsecase)(nil).ListApplications), pagenation, applicationStatus, event_id)
}

// PostersByEvent mocks base method.
func (m *MockEventUsecase) PostersByEvent(event_id int) (*[]domain.PosterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostersByEvent", event_id)
	ret0, _ := ret[0].(*[]domain.PosterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostersByEvent indicates an expected call of PostersByEvent.
func (mr *MockEventUsecaseMockRecorder) PostersByEvent(event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostersByEvent", reflect.TypeOf((*MockEventUsecase)(nil).PostersByEvent), event_id)
}

// RejectApplication mocks base method.
func (m *MockEventUsecase) RejectApplication(applicationStatusId, event_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectApplication", applicationStatusId, event_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectApplication indicates an expected call of RejectApplication.
func (mr *MockEventUsecaseMockRecorder) RejectApplication(applicationStatusId, event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectApplication", reflect.TypeOf((*MockEventUsecase)(nil).RejectApplication), applicationStatusId, event_id)
}

// SearchEventUser mocks base method.
func (m *MockEventUsecase) SearchEventUser(search string) (*[]domain.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEventUser", search)
	ret0, _ := ret[0].(*[]domain.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEventUser indicates an expected call of SearchEventUser.
func (mr *MockEventUsecaseMockRecorder) SearchEventUser(search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEventUser", reflect.TypeOf((*MockEventUsecase)(nil).SearchEventUser), search)
}

// UpdateEvent mocks base method.
func (m *MockEventUsecase) UpdateEvent(event domain.Events, event_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", event, event_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventUsecaseMockRecorder) UpdateEvent(event, event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventUsecase)(nil).UpdateEvent), event, event_id)
}
