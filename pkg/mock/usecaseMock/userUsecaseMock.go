// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/userUsecaseInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/SethukumarJ/Events_Radar_Developement/pkg/domain"
	utils "github.com/SethukumarJ/Events_Radar_Developement/pkg/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AcceptJoinInvitation mocks base method.
func (m *MockUserUseCase) AcceptJoinInvitation(user_id, organization_id int, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptJoinInvitation", user_id, organization_id, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptJoinInvitation indicates an expected call of AcceptJoinInvitation.
func (mr *MockUserUseCaseMockRecorder) AcceptJoinInvitation(user_id, organization_id, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptJoinInvitation", reflect.TypeOf((*MockUserUseCase)(nil).AcceptJoinInvitation), user_id, organization_id, role)
}

// AddMembers mocks base method.
func (m *MockUserUseCase) AddMembers(newMembers []domain.AddMembers, memberRole string, organization_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMembers", newMembers, memberRole, organization_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMembers indicates an expected call of AddMembers.
func (mr *MockUserUseCaseMockRecorder) AddMembers(newMembers, memberRole, organization_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMembers", reflect.TypeOf((*MockUserUseCase)(nil).AddMembers), newMembers, memberRole, organization_id)
}

// AdmitMember mocks base method.
func (m *MockUserUseCase) AdmitMember(JoinStatusId int, memberRole string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdmitMember", JoinStatusId, memberRole)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdmitMember indicates an expected call of AdmitMember.
func (mr *MockUserUseCaseMockRecorder) AdmitMember(JoinStatusId, memberRole interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdmitMember", reflect.TypeOf((*MockUserUseCase)(nil).AdmitMember), JoinStatusId, memberRole)
}

// ApplyEvent mocks base method.
func (m *MockUserUseCase) ApplyEvent(applicationForm domain.ApplicationForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyEvent", applicationForm)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyEvent indicates an expected call of ApplyEvent.
func (mr *MockUserUseCaseMockRecorder) ApplyEvent(applicationForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyEvent", reflect.TypeOf((*MockUserUseCase)(nil).ApplyEvent), applicationForm)
}

// CreateOrganization mocks base method.
func (m *MockUserUseCase) CreateOrganization(organization domain.Organizations) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", organization)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockUserUseCaseMockRecorder) CreateOrganization(organization interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockUserUseCase)(nil).CreateOrganization), organization)
}

// CreateUser mocks base method.
func (m *MockUserUseCase) CreateUser(user domain.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserUseCaseMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserUseCase)(nil).CreateUser), user)
}

// DeleteMember mocks base method.
func (m *MockUserUseCase) DeleteMember(user_id, organization_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", user_id, organization_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockUserUseCaseMockRecorder) DeleteMember(user_id, organization_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockUserUseCase)(nil).DeleteMember), user_id, organization_id)
}

// FeaturizeEvent mocks base method.
func (m *MockUserUseCase) FeaturizeEvent(order_id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeaturizeEvent", order_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FeaturizeEvent indicates an expected call of FeaturizeEvent.
func (mr *MockUserUseCaseMockRecorder) FeaturizeEvent(order_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeaturizeEvent", reflect.TypeOf((*MockUserUseCase)(nil).FeaturizeEvent), order_id)
}

// FindApplication mocks base method.
func (m *MockUserUseCase) FindApplication(user_id, event_id int) (*domain.ApplicationFormResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindApplication", user_id, event_id)
	ret0, _ := ret[0].(*domain.ApplicationFormResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindApplication indicates an expected call of FindApplication.
func (mr *MockUserUseCaseMockRecorder) FindApplication(user_id, event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindApplication", reflect.TypeOf((*MockUserUseCase)(nil).FindApplication), user_id, event_id)
}

// FindOrganizationById mocks base method.
func (m *MockUserUseCase) FindOrganizationById(organization_id int) (*domain.OrganizationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrganizationById", organization_id)
	ret0, _ := ret[0].(*domain.OrganizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrganizationById indicates an expected call of FindOrganizationById.
func (mr *MockUserUseCaseMockRecorder) FindOrganizationById(organization_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrganizationById", reflect.TypeOf((*MockUserUseCase)(nil).FindOrganizationById), organization_id)
}

// FindOrganizationByName mocks base method.
func (m *MockUserUseCase) FindOrganizationByName(organizationName string) (*domain.OrganizationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrganizationByName", organizationName)
	ret0, _ := ret[0].(*domain.OrganizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrganizationByName indicates an expected call of FindOrganizationByName.
func (mr *MockUserUseCaseMockRecorder) FindOrganizationByName(organizationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrganizationByName", reflect.TypeOf((*MockUserUseCase)(nil).FindOrganizationByName), organizationName)
}

// FindUserById mocks base method.
func (m *MockUserUseCase) FindUserById(user_id int) (*domain.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", user_id)
	ret0, _ := ret[0].(*domain.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockUserUseCaseMockRecorder) FindUserById(user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockUserUseCase)(nil).FindUserById), user_id)
}

// FindUserByName mocks base method.
func (m *MockUserUseCase) FindUserByName(email string) (*domain.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByName", email)
	ret0, _ := ret[0].(*domain.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByName indicates an expected call of FindUserByName.
func (mr *MockUserUseCaseMockRecorder) FindUserByName(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByName", reflect.TypeOf((*MockUserUseCase)(nil).FindUserByName), email)
}

// GetPublicFaqas mocks base method.
func (m *MockUserUseCase) GetPublicFaqas(event_id int) (*[]domain.QAResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicFaqas", event_id)
	ret0, _ := ret[0].(*[]domain.QAResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicFaqas indicates an expected call of GetPublicFaqas.
func (mr *MockUserUseCaseMockRecorder) GetPublicFaqas(event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicFaqas", reflect.TypeOf((*MockUserUseCase)(nil).GetPublicFaqas), event_id)
}

// GetQuestions mocks base method.
func (m *MockUserUseCase) GetQuestions(event_id int) (*[]domain.FaqaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestions", event_id)
	ret0, _ := ret[0].(*[]domain.FaqaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockUserUseCaseMockRecorder) GetQuestions(event_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockUserUseCase)(nil).GetQuestions), event_id)
}

// JoinOrganization mocks base method.
func (m *MockUserUseCase) JoinOrganization(organization_id, user_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinOrganization", organization_id, user_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinOrganization indicates an expected call of JoinOrganization.
func (mr *MockUserUseCaseMockRecorder) JoinOrganization(organization_id, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinOrganization", reflect.TypeOf((*MockUserUseCase)(nil).JoinOrganization), organization_id, user_id)
}

// ListJoinRequests mocks base method.
func (m *MockUserUseCase) ListJoinRequests(user_id, organization_id int) (*[]domain.Join_StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJoinRequests", user_id, organization_id)
	ret0, _ := ret[0].(*[]domain.Join_StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJoinRequests indicates an expected call of ListJoinRequests.
func (mr *MockUserUseCaseMockRecorder) ListJoinRequests(user_id, organization_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJoinRequests", reflect.TypeOf((*MockUserUseCase)(nil).ListJoinRequests), user_id, organization_id)
}

// ListMembers mocks base method.
func (m *MockUserUseCase) ListMembers(memberRole string, organization_id int) (*[]domain.UserOrganizationConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", memberRole, organization_id)
	ret0, _ := ret[0].(*[]domain.UserOrganizationConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockUserUseCaseMockRecorder) ListMembers(memberRole, organization_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockUserUseCase)(nil).ListMembers), memberRole, organization_id)
}

// ListOrganizations mocks base method.
func (m *MockUserUseCase) ListOrganizations(pagenation utils.Filter) (*[]domain.OrganizationsResponse, *utils.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", pagenation)
	ret0, _ := ret[0].(*[]domain.OrganizationsResponse)
	ret1, _ := ret[1].(*utils.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockUserUseCaseMockRecorder) ListOrganizations(pagenation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockUserUseCase)(nil).ListOrganizations), pagenation)
}

// PostAnswer mocks base method.
func (m *MockUserUseCase) PostAnswer(answer domain.Answers, question int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAnswer", answer, question)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostAnswer indicates an expected call of PostAnswer.
func (mr *MockUserUseCaseMockRecorder) PostAnswer(answer, question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAnswer", reflect.TypeOf((*MockUserUseCase)(nil).PostAnswer), answer, question)
}

// PostQuestion mocks base method.
func (m *MockUserUseCase) PostQuestion(question domain.Faqas) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostQuestion", question)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostQuestion indicates an expected call of PostQuestion.
func (mr *MockUserUseCaseMockRecorder) PostQuestion(question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostQuestion", reflect.TypeOf((*MockUserUseCase)(nil).PostQuestion), question)
}

// Prmotion_Faliure mocks base method.
func (m *MockUserUseCase) Prmotion_Faliure(order_id, payment_id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prmotion_Faliure", order_id, payment_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prmotion_Faliure indicates an expected call of Prmotion_Faliure.
func (mr *MockUserUseCaseMockRecorder) Prmotion_Faliure(order_id, payment_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prmotion_Faliure", reflect.TypeOf((*MockUserUseCase)(nil).Prmotion_Faliure), order_id, payment_id)
}

// Prmotion_Success mocks base method.
func (m *MockUserUseCase) Prmotion_Success(order_id, payment_id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prmotion_Success", order_id, payment_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prmotion_Success indicates an expected call of Prmotion_Success.
func (mr *MockUserUseCaseMockRecorder) Prmotion_Success(order_id, payment_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prmotion_Success", reflect.TypeOf((*MockUserUseCase)(nil).Prmotion_Success), order_id, payment_id)
}

// PromoteEvent mocks base method.
func (m *MockUserUseCase) PromoteEvent(promotion domain.Promotion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteEvent", promotion)
	ret0, _ := ret[0].(error)
	return ret0
}

// PromoteEvent indicates an expected call of PromoteEvent.
func (mr *MockUserUseCaseMockRecorder) PromoteEvent(promotion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteEvent", reflect.TypeOf((*MockUserUseCase)(nil).PromoteEvent), promotion)
}

// SendVerificationEmail mocks base method.
func (m *MockUserUseCase) SendVerificationEmail(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationEmail indicates an expected call of SendVerificationEmail.
func (mr *MockUserUseCaseMockRecorder) SendVerificationEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationEmail", reflect.TypeOf((*MockUserUseCase)(nil).SendVerificationEmail), email)
}

// UpdatePassword mocks base method.
func (m *MockUserUseCase) UpdatePassword(password, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", password, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserUseCaseMockRecorder) UpdatePassword(password, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserUseCase)(nil).UpdatePassword), password, email)
}

// UpdateProfile mocks base method.
func (m *MockUserUseCase) UpdateProfile(user domain.Bios, user_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", user, user_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserUseCaseMockRecorder) UpdateProfile(user, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserUseCase)(nil).UpdateProfile), user, user_id)
}

// UpdateRole mocks base method.
func (m *MockUserUseCase) UpdateRole(user_id, organization_id int, updatedRole string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", user_id, organization_id, updatedRole)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockUserUseCaseMockRecorder) UpdateRole(user_id, organization_id, updatedRole interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockUserUseCase)(nil).UpdateRole), user_id, organization_id, updatedRole)
}

// VerifyRole mocks base method.
func (m *MockUserUseCase) VerifyRole(user_id, organization_id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRole", user_id, organization_id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRole indicates an expected call of VerifyRole.
func (mr *MockUserUseCaseMockRecorder) VerifyRole(user_id, organization_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRole", reflect.TypeOf((*MockUserUseCase)(nil).VerifyRole), user_id, organization_id)
}
